"""initial

Revision ID: f25dff0d9209
Revises: 
Create Date: 2024-12-04 22:54:00.606173

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f25dff0d9209'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('library_locations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('publishers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'MEMBER', name='userrole'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('books',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('publisher_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['publisher_id'], ['publishers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('checkouts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('item_type', sa.String(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('checkout_date', sa.Date(), nullable=False),
    sa.Column('return_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('magazines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('publisher_id', sa.Integer(), nullable=True),
    sa.Column('frequency', sa.Enum('WEEKLY', 'FORTNIGHTLY', 'MONTHLY', name='frequency'), nullable=False),
    sa.ForeignKeyConstraint(['publisher_id'], ['publishers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('puzzles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('manufacturer', sa.String(), nullable=False),
    sa.Column('difficulty', sa.Enum('EASY', 'MEDIUM', 'HARD', name='difficultylevel'), nullable=False),
    sa.Column('pieces', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['library_locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('editions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('book_id', sa.Integer(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['books.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('magazine_volumes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('magazine_id', sa.Integer(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('issue_number', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['library_locations.id'], ),
    sa.ForeignKeyConstraint(['magazine_id'], ['magazines.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('magazine_id', 'year', 'issue_number')
    )
    op.create_table('book_copies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('edition_id', sa.Integer(), nullable=True),
    sa.Column('location_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['edition_id'], ['editions.id'], ),
    sa.ForeignKeyConstraint(['location_id'], ['library_locations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('edition_authors',
    sa.Column('edition_id', sa.Integer(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['authors.id'], ),
    sa.ForeignKeyConstraint(['edition_id'], ['editions.id'], ),
    sa.PrimaryKeyConstraint('edition_id', 'author_id')
    )
    # ### end Alembic commands ###

    # Insert data into users table
    op.execute("""
            INSERT INTO users (id, username, password, role) VALUES
            (1, 'Admin', '$2b$12$sBSx8byjUL5xH0EAxwoOSuXKMNYrRUi2.lNED3nmyY/cM0hVhSk66', 'ADMIN'),
            (2, 'Member', '$2b$12$sBSx8byjUL5xH0EAxwoOSuXKMNYrRUi2.lNED3nmyY/cM0hVhSk66', 'MEMBER');
        """)

    # Insert data into authors table
    op.execute("""
            INSERT INTO authors (id, name) VALUES
            (1, 'J.K. Rowling'),
            (2, 'George Orwell');
        """)

    # Insert data into library_locations table
    op.execute("""
            INSERT INTO library_locations (id, name, address) VALUES
            (1, 'Central Library', '123 Main St, City A'),
            (2, 'East Branch', '456 Oak St, City B');
        """)

    # Insert data into publishers table
    op.execute("""
            INSERT INTO publishers (id, name) VALUES
            (1, 'Bloomsbury'),
            (2, 'Secker & Warburg');
        """)

    # Insert data into books table
    op.execute("""
            INSERT INTO books (id, title, publisher_id) VALUES
            (1, 'Harry Potter and the Philosophers Stone', 1),
            (2, '1984', 2);
        """)

    # Insert data into checkouts table
    op.execute("""
            INSERT INTO checkouts (id, user_id, item_type, item_id, checkout_date, return_date) VALUES
            (1, 2, 'book', 1, '2024-12-01', NULL),
            (2, 2, 'book', 2, '2024-12-02', '2024-12-05');
        """)

    # Insert data into magazines table
    op.execute("""
            INSERT INTO magazines (id, title, publisher_id, frequency) VALUES
            (1, 'The Economist', 2, 'WEEKLY'),
            (2, 'National Geographic', 1, 'MONTHLY');
        """)

    # Insert data into puzzles table
    op.execute("""
            INSERT INTO puzzles (id, title, manufacturer, difficulty, pieces, location_id) VALUES
            (1, 'Crossword Puzzle', 'Puzzle Corp', 'MEDIUM', 500, 1),
            (2, 'Jigsaw Puzzle', 'Puzzle Makers', 'EASY', 1000, 2);
        """)

    # Insert data into editions table
    op.execute("""
            INSERT INTO editions (id, book_id, year) VALUES
            (1, 1, 1997),
            (2, 2, 1949);
        """)

    # Insert data into magazine_volumes table
    op.execute("""
            INSERT INTO magazine_volumes (id, magazine_id, year, issue_number, location_id) VALUES
            (1, 1, 2024, 1, 1),
            (2, 2, 2024, 12, 2);
        """)

    # Insert data into book_copies table
    op.execute("""
            INSERT INTO book_copies (id, edition_id, location_id) VALUES
            (1, 1, 1),
            (2, 2, 2);
        """)

    # Insert data into edition_authors table
    op.execute("""
            INSERT INTO edition_authors (edition_id, author_id) VALUES
            (1, 1),  -- J.K. Rowling for Harry Potter
            (2, 2);  -- George Orwell for 1984
        """)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('edition_authors')
    op.drop_table('book_copies')
    op.drop_table('magazine_volumes')
    op.drop_table('editions')
    op.drop_table('puzzles')
    op.drop_table('magazines')
    op.drop_table('checkouts')
    op.drop_table('books')
    op.drop_table('users')
    op.drop_table('publishers')
    op.drop_table('library_locations')
    op.drop_table('authors')
    op.execute("DROP TYPE IF EXISTS userrole")
    op.execute("DROP TYPE IF EXISTS frequency")
    op.execute("DROP TYPE IF EXISTS difficultylevel")
    # ### end Alembic commands ###
